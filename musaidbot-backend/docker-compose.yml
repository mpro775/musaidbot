version: '3.8'

services:
  redis:
    image: redis:6-alpine
    container_name: musaidbot-redis
    command: ['redis-server']
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backnet

  qdrant:
    image: qdrant/qdrant:latest
    container_name: musaidbot-qdrant
    restart: always
    ports:
      - '6333:6333'
    volumes:
      - ./qdrant_data:/qdrant/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:6333']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backnet
  embedding:
    build:
      context: ./embedding-service
    container_name: musaidbot-embedding
    ports:
      - '8000:8000'
    networks:
      - backnet
    restart: unless-stopped

  mongo:
    image: mongo:5
    container_name: musaidbot-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: strongpassword
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'mongo --quiet --eval "db.adminCommand(''ping'')" || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backnet

  mongo-express:
    image: mongo-express:latest
    container_name: musaidbot-mongo-express
    environment:
      ME_CONFIG_MONGODB_SERVER: 'mongo'
      ME_CONFIG_MONGODB_ADMINUSERNAME: '${MONGO_INITDB_ROOT_USERNAME}'
      ME_CONFIG_MONGODB_ADMINPASSWORD: '${MONGO_INITDB_ROOT_PASSWORD}'
      ME_CONFIG_MONGODB_AUTH_DATABASE: 'admin'
      ME_CONFIG_MONGODB_URL: 'mongodb://mongo:27017'
    ports:
      - '8081:8081'
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - backnet

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: musaidbot-redis-commander
    environment:
      REDIS_HOSTS: 'local:redis:6379'
    ports:
      - '8082:8081'
    depends_on:
      - redis
    networks:
      - backnet

  minio:
    image: minio/minio:latest
    container_name: musaidbot-minio
    command: server /data
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    healthcheck:
      test:
        [
          'CMD',
          'mc',
          'alias',
          'set',
          'local',
          'http://minio:9000',
          '${MINIO_ACCESS_KEY}',
          '${MINIO_SECRET_KEY}',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backnet

  api:
    build: .
    container_name: musaidbot-api
    ports:
      - '3000:3000'
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - backnet
  reranker:
    build:
      context: ./vector-reranker
    container_name: musaidbot-reranker
    ports:
      - '8500:8500'
    networks:
      - backnet
    restart: unless-stopped

  extractor:
    build:
      context: ./extractor-service
    container_name: musaidbot-extractor
    ports:
      - '8001:8001'
    networks:
      - backnet
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -f http://localhost:8001/extract/?url=https://example.com || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
  n8n:
    build:
      context: .
      dockerfile: Dockerfile.n8n
    container_name: musaidbot-n8n
    env_file:
      - .env
    environment:
      - N8N_HOST=n8n.smartagency-ye.com
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://n8n.smartagency-ye.com
      - VUE_APP_URL_BASE_API=https://n8n.smartagency-ye.com
      - N8N_RUNNERS_ENABLED=true
      - N8N_CORS_ALLOW_ORIGIN=https://localhost:5173
      - N8N_CORS_ALLOW_CREDENTIALS=true

    ports:
      - '5678:5678'
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - n8n_data:/home/node/.n8n
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5678/rest/healthz']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backnet

volumes:
  redis_data:
  mongo_data:
  n8n_data:
  minio_data:
  qdrant_data:

networks:
  backnet:
    driver: bridge
